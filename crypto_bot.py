import os
import requests
import time
import telebot
import logging
from threading import Thread
from datetime import datetime
from flask import Flask
import pytz

# === C·∫•u h√¨nh Logging ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# === C·∫•u h√¨nh Telegram Bot ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # Token c·ªßa bot t·ª´ BotFather
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")     # ID chat c·ªßa nh√≥m ho·∫∑c ng∆∞·ªùi d√πng
if not BOT_TOKEN or not CHAT_ID:
    raise ValueError("‚ö†Ô∏è H√£y ƒë·∫£m b·∫£o b·∫°n thi·∫øt l·∫≠p TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID trong bi·∫øn m√¥i tr∆∞·ªùng!")

bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# Danh s√°ch coin theo d√µi
WATCHLIST = {"BTC", "ETH", "ADA", "CAKE", "PI", "SOL", "TRUMP", "XRP", "DOGE", "TRX"}

# === Flask App gi·ªØ bot "s·ªëng" ===
app = Flask('')

@app.route('/')
def home():
    return "Bot is running!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# === L·ªánh /help ===
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìå Danh s√°ch l·ªánh:\n"
        "/start - B·∫Øt ƒë·∫ßu bot\n"
        "/status - Ki·ªÉm tra tr·∫°ng th√°i bot\n"
        "/p [coin] [khung th·ªùi gian] - Xem gi√° v√† % thay ƒë·ªïi c·ªßa coin\n"
        "V√≠ d·ª•: /p BTC ETH dom 15m (xem gi√° BTC, ETH & BTC Dominance, thay ƒë·ªïi so v·ªõi 15 ph√∫t tr∆∞·ªõc)"
    )
    bot.send_message(message.chat.id, help_text)

# === L·ªánh /start ===
@bot.message_handler(commands=['start'])
def start_bot(message):
    bot.send_message(message.chat.id, "ü§ñ Bot Crypto ƒë√£ kh·ªüi ƒë·ªông! G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh.")

# === L·ªánh /status ===
@bot.message_handler(commands=['status'])
def check_status(message):
    bot.send_message(message.chat.id, "‚úÖ Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!")

# L·∫•y BTC Dominance t·ª´ CoinGecko
def get_btc_dominance():
    url = "https://api.coingecko.com/api/v3/global"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['data']['market_cap_percentage']['btc']
    return None

# L·ªánh /p ƒë·ªÉ ki·ªÉm tra gi√° nhi·ªÅu coin
def get_price_change(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng: /p [coin1] [coin2] ... [th·ªùi gian]")
            return

        coins = [coin.upper() for coin in parts[1:-1]]
        timeframe = parts[-1] if len(parts) > 2 else "15m"
        reply_texts = []

        for coin in coins:
            if coin in {"BTC.D", "DOM"}:  # Ki·ªÉm tra BTC Dominance
                btc_dominance = get_btc_dominance()
                if btc_dominance is None:
                    reply_texts.append("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu BTC Dominance!")
                else:
                    reply_texts.append(f"üìä BTC Dominance hi·ªán t·∫°i: {btc_dominance:.2f}% (khung th·ªùi gian: {timeframe})")
            else:
                url = f"https://api.mexc.com/api/v3/ticker/24hr?symbol={coin}USDT"
                response = requests.get(url)
                if response.status_code != 200:
                    reply_texts.append(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi√° {coin}!")
                else:
                    data = response.json()
                    last_price = float(data["lastPrice"])
                    price_change_percent = float(data["priceChangePercent"])
                    reply_texts.append(f"üí∞ {coin}: {last_price:.4f} USDT ({price_change_percent:+.2f}%)")

        msg = bot.reply_to(message, "\n".join(reply_texts))
        time.sleep(30)  # X√≥a sau 30 gi√¢y
        bot.delete_message(message.chat.id, msg.message_id)
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"L·ªói trong get_price_change: {e}")

bot.message_handler(commands=['p'])(get_price_change)

# === L·ªánh FOMO/FUD ch·ªâ ho·∫°t ƒë·ªông t·ª´ 7h s√°ng ƒë·∫øn 21h30 ===
def check_price_changes():
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.now(tz).time()
    start_time = datetime.strptime("07:00", "%H:%M").time()
    end_time = datetime.strptime("21:30", "%H:%M").time()

    # Ch·ªâ g·ª≠i th√¥ng b√°o trong khung gi·ªù t·ª´ 7:00 - 21:30
    if start_time <= now <= end_time:
        url = "https://api.mexc.com/api/v3/klines"
        alerts = []

        for coin in WATCHLIST:
            try:
                # G·ª≠i y√™u c·∫ßu l·∫•y d·ªØ li·ªáu trong khung th·ªùi gian 10 ph√∫t (2 n·∫øn)
                params = {
                    "symbol": f"{coin}USDT",
                    "interval": "5m",
                    "limit": 2  # L·∫•y 2 n·∫øn g·∫ßn nh·∫•t (10 ph√∫t)
                }
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                data = response.json()

                if len(data) < 2:
                    logging.warning(f"D·ªØ li·ªáu kh√¥ng ƒë·ªß cho {coin} trong khung 10 ph√∫t.")
                    continue

                # L·∫•y th√¥ng tin gi√° t·ª´ 2 n·∫øn g·∫ßn nh·∫•t
                prev_candle = data[-2]
                current_candle = data[-1]
                open_price = float(prev_candle[1])  # Gi√° m·ªü n·∫øn tr∆∞·ªõc
                close_price = float(current_candle[4])  # Gi√° ƒë√≥ng n·∫øn hi·ªán t·∫°i

                # T√≠nh bi·∫øn ƒë·ªông gi√° theo ph·∫ßn trƒÉm
                price_change_percent = ((close_price - open_price) / open_price) * 100

                # G·ª≠i c·∫£nh b√°o n·∫øu bi·∫øn ƒë·ªông v∆∞·ª£t 5%
                if abs(price_change_percent) > 5:
                    alert_type = "üöÄ FOMO üöÄ" if price_change_percent > 0 else "üò± FUD üò±"
                    bot.send_message(
                        CHAT_ID,
                        f"{alert_type} {coin} bi·∫øn ƒë·ªông {price_change_percent:+.2f}% trong 10 ph√∫t!"
                    )
            except requests.RequestException as e:
                logging.error(f"L·ªói khi truy v·∫•n d·ªØ li·ªáu cho {coin}: {e}")
            except Exception as e:
                logging.error(f"L·ªói kh√¥ng mong mu·ªën khi x·ª≠ l√Ω {coin}: {e}")

def start_price_monitor():
    while True:
        check_price_changes()  # Ki·ªÉm tra bi·∫øn ƒë·ªông gi√°
        time.sleep(600)  # Chu k·ª≥ ki·ªÉm tra: m·ªói 10 ph√∫t

# Ch·∫°y theo d√µi gi√° trong lu·ªìng ri√™ng
Thread(target=start_price_monitor, daemon=True).start()

# === Ch·∫°y bot ===
if __name__ == "__main__":
    keep_alive()
    bot.polling(none_stop=True, timeout=30, interval=1)